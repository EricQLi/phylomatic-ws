#!/usr/bin/gawk -f

## Webservice for phylomatic 

## This program is free software; you can redistribute it and/or
## modify it under the terms of the BSD 2-Clause License:
## http://www.opensource.org/licenses/bsd-license.php
## Copyright (c) 2012, Campbell Webb <cwebb@oeb.harvard.edu>

# (requires gawk4)

@include "lib/fyt2new.awk"
@include "lib/cdao2fyt.awk"
@include "lib/readfyt.awk"
@include "lib/utils.awk"

BEGIN{

  ORS = "";
  PS = PROCINFO["pid"] ;

  # test for phylomatic in path
  RS = "\n";
  "which phylomatic" | getline whichpm;
  if ( whichpm ~ /phylomatic/) PM = "phylomatic" ;
  else PM = "./phylomatic" ; # need symlink in same dir

  # clean old files (older than one minute)
  system("rm -f `find run -type f -cmin +1 -not -name .gitignore -print` \
          >& /dev/null");

  # GET or POST?
  # test with curl -d "a=b" [-G] <URL>
  RS = "\x04";
  if (ENVIRON["QUERY_STRING"])
	{
	  IN = ENVIRON["QUERY_STRING"] ;
	}
  else getline IN;

  # parse input
  split( IN, query, "&" );
  for (i in query)
	{
	  split(query[i],tmpquery,"=");
	  # test for size of tree
	  if (length(tmpquery[2]) > 10000) 
		{ error("Trees over 10kB must be passed by URI") }  
	  f[tmpquery[1]] = decode(tmpquery[2]);
	}

  # Check for switches:

  if ((!f["intree"]) && (!f["intreeuri"])) 
	{ error("either intree or intreeuri must be given") }
  if ((f["intree"]) && (f["intreeuri"])) 
	{ error("either intree OR intreeuri must be given") }
  if ((f["method"] != "phylomatic") && (f["method"] != "convert"))
	{ error("method of phylomatic or convert must be given") }
  if ((f["method"] == "phylomatic") && (!f["taxa"]))
	{ error("if method=phylomatic, taxa must be given") }
  if ((f["informat"] != "newick") && (f["informat"] != "nexml") && \
	  (f["informat"] != "cdaordf"))
	{ error("informat must be either newick, nexml or cdaordf") }

  # BEGIN controller

  # phylomatic

  if (f["method"] == "phylomatic")
	{
	  print gensub(/\|/,"\n","G", encode(f["taxa"])) "\n" > "run/" PS ".taxa" ;

	  # tree data provided directly 
	  if (f["intree"]) 
		{
		  if ((f["informat"] == "newick") || (f["informat"] == ""))
			{
			  print encode(f["intree"]) > "run/" PS ".phylo" ;
			}
		  else if (f["informat"] == "nexml")
			{
			  print encode(f["intree"]) > "run/" PS ".nexml" ;
			  system("cat run/" PS ".nexml | ./nexml2newick > run/" PS ".phylo")			}
		}
	  else # intreeuri
		{
		}

	  # Run CLI phylomatic
	  system(PM " -t run/" PS ".taxa -f run/" PS ".phylo > run/" PS ".out") ;
	  RS = "\x04"; 
	  "cat run/" PS ".out" | getline results ;

	  print "Content-type: text/plain\n\n";
	  print decode(results);
	}

  # FORMAT CONVERSIONS
  else if (f["method"] == "convert")
	{
	  if ((f["intree"]) &&  (f["informat"] == "nexml"))
		{
		  cmd = "xgawk -f lib/nexml2fyt.awk" ;
		  print f["intree"] |& cmd ;
		  close(cmd, "to");
		  RS = "\x04"; 
		  cmd |& getline results ;
		  close(cmd);
		  readfyt(results);
		}
	  else if ((f["intreeuri"]) &&  (f["informat"] == "nexml"))
		{
		  cmd = "curl \"" f["intreeuri"] "\" > run/" PS ".nexml" ;
		  if (system(cmd) != 0)	{ error("copying file from url failed") }
		  close(cmd);
		  cmd2 = "xgawk -f lib/nexml2fyt.awk run/" PS ".nexml";
		  RS = "\x04";
		  # getline results < "run/" PS ".fyt" ;
		  cmd2 | getline results ;
		  close(cmd2);
		  readfyt(results);
		}
	  else if ((f["intreeuri"]) &&  (f["informat"] == "cdaordf"))
		{
		  cmd = "curl -L -H \"Accept: application/rdf+xml\" \"" f["intreeuri"] "\" > run/" PS ".rdf" ;
		  if (system(cmd) != 0)	{ error("copying file from url failed") }
		  close(cmd);
		  cmd2 = "rapper -i rdfxml -o ntriples run/" PS ".rdf";
		  RS = "\x04";
		  cmd2 | getline results ;
		  close(cmd2);
		  cdao2fyt(results) ;
		}
		  
	  print "Content-type: text/plain\n\n";
	  # print results;
	  fyt2new();

	  # curl --data-urlencode intree@tmp/nexmlconvert.post -d method=convert -d informat=nexml http://localhost/~cam/phylomatic-ws/pmws
      # curl -d intreeuri=http://localhost/~cam/phylomatic-ws/eg/tol.nexml.xml -d method=convert -d informat=nexml http://localhost/~cam/phylomatic-ws/pmws > out
	}

  else error("Method needed") ;

}

